# ============================================
# TUTORIAL COMPLETO DE MIGRA√á√ÉO
# Sistema de Ordens de Servi√ßo: Replit ‚Üí Externo ‚Üí Vercel
# ============================================

## üìã √çNDICE

1. AN√ÅLISE DA ARQUITETURA ATUAL
2. IDENTIFICA√á√ÉO DO BANCO DE DADOS
3. EXTRA√á√ÉO DE DADOS
4. CONFIGURA√á√ÉO DE BANCO EXTERNO
5. ALTERA√á√ïES NO C√ìDIGO
6. CONFIGURA√á√ÉO DE AMBIENTE
7. DEPLOY LOCAL E PRODU√á√ÉO
8. CHECKLIST FINAL
9. COMANDOS √öTEIS
10. TROUBLESHOOTING

# ============================================
# 1. AN√ÅLISE DA ARQUITETURA ATUAL
# ============================================

## Estrutura do Projeto:
```
service-orders-system/
‚îú‚îÄ‚îÄ client/src/                    # Frontend React + TypeScript
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/            # Componentes do dashboard
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modals/               # 14 modais do sistema
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/                   # Componentes shadcn/ui
‚îÇ   ‚îú‚îÄ‚îÄ hooks/                    # Custom hooks
‚îÇ   ‚îú‚îÄ‚îÄ lib/                      # Utilit√°rios e query client
‚îÇ   ‚îî‚îÄ‚îÄ pages/                    # P√°ginas da aplica√ß√£o
‚îú‚îÄ‚îÄ server/                       # Backend Express + TypeScript
‚îÇ   ‚îú‚îÄ‚îÄ db.ts                     # Configura√ß√£o do banco (Drizzle)
‚îÇ   ‚îú‚îÄ‚îÄ index.ts                  # Servidor principal
‚îÇ   ‚îú‚îÄ‚îÄ routes.ts                 # Rotas da API
‚îÇ   ‚îú‚îÄ‚îÄ storage.ts                # Interface de armazenamento (PROBLEMA AQUI)
‚îÇ   ‚îî‚îÄ‚îÄ vite.ts                   # Integra√ß√£o com Vite
‚îú‚îÄ‚îÄ shared/                       # Tipos compartilhados
‚îÇ   ‚îî‚îÄ‚îÄ schema.ts                 # Schema do banco (Drizzle ORM)
‚îú‚îÄ‚îÄ dump.sql                      # Script completo do banco
‚îú‚îÄ‚îÄ migrations.sql                # Apenas estrutura
‚îú‚îÄ‚îÄ seeds.sql                     # Apenas dados
‚îî‚îÄ‚îÄ package.json                  # Depend√™ncias

## Tecnologias Utilizadas:
- Frontend: React 18, TypeScript, Vite, Tailwind CSS, Shadcn/ui
- Backend: Express.js, TypeScript, Drizzle ORM
- Banco: PostgreSQL (configurado mas n√£o usado)
- Autentica√ß√£o: Express sessions
- UI: Glassmorphism design com gradientes azuis
- Estado: TanStack Query para cache de dados

## Fluxo de Dados Atual:
Frontend ‚Üí API Routes ‚Üí MemStorage (Map objects) ‚Üí Resposta JSON

## PROBLEMA PRINCIPAL:
O sistema est√° usando MemStorage (armazenamento em mem√≥ria) em vez de PostgreSQL real.

# ============================================
# 2. IDENTIFICA√á√ÉO DO BANCO DE DADOS
# ============================================

## Banco Atual: 
‚ùå PostgreSQL configurado mas N√ÉO USADO
‚úÖ MemStorage (Map objects em mem√≥ria)

## Evid√™ncias:
- server/storage.ts linha 72: `export class MemStorage implements IStorage`
- server/db.ts: Configurado para PostgreSQL mas n√£o utilizado
- shared/schema.ts: Schema completo do PostgreSQL definido

## Dados Atuais (em mem√≥ria):
- ‚úÖ 6 T√©cnicos (Victor F., Shelbert, Everton, Daniel, Samuel, Wesley)
- ‚úÖ 3 Equipes (CAIXA-01, CAIXA-02, CAIXA-03)
- ‚úÖ 8 Ordens de Servi√ßo (c√≥digos: 139390, 125419, 120569, etc.)
- ‚úÖ 2 Cidades (UBA-MG, TOCANTINS-MG)
- ‚úÖ 125 Bairros (111 em UBA-MG, 14 em TOCANTINS-MG)
- ‚úÖ 7 Tipos de Servi√ßo (ATIVA√á√ÉO, LOSS, UPGRADE, etc.)
- ‚úÖ 3 Relat√≥rios de exemplo

# ============================================
# 3. EXTRA√á√ÉO DE DADOS
# ============================================

## Arquivos Gerados:

### dump.sql (COMPLETO - 390 linhas)
- ‚úÖ CREATE TABLE para todas as 7 tabelas
- ‚úÖ CREATE INDEX para performance
- ‚úÖ INSERT com todos os dados atuais
- ‚úÖ Constraints e foreign keys
- ‚úÖ Verifica√ß√£o final dos dados

### migrations.sql (ESTRUTURA - 124 linhas)
- ‚úÖ Apenas CREATE TABLE statements
- ‚úÖ √çndices de performance
- ‚úÖ Constraints de valida√ß√£o
- ‚ùå Sem dados (apenas estrutura)

### seeds.sql (DADOS - 313 linhas)
- ‚úÖ Apenas INSERT statements
- ‚úÖ Todos os dados de amostra
- ‚úÖ ON CONFLICT para execu√ß√£o segura
- ‚ùå Sem estrutura (apenas dados)

## Comando para Verificar:
```bash
wc -l *.sql
# dump.sql: 390 linhas (estrutura + dados)
# migrations.sql: 124 linhas (s√≥ estrutura)
# seeds.sql: 313 linhas (s√≥ dados)
```

# ============================================
# 4. CONFIGURA√á√ÉO DE BANCO EXTERNO
# ============================================

## OP√á√ÉO A: SUPABASE (Recomendado para produ√ß√£o)

### Passo 1: Criar Projeto
```bash
# 1. Acesse https://supabase.com/dashboard
# 2. Clique em "New Project"
# 3. Escolha organiza√ß√£o e regi√£o
# 4. Defina nome e senha forte
# 5. Aguarde provisionamento (2-3 minutos)
```

### Passo 2: Obter URL do Banco
```bash
# 1. Entre no projeto criado
# 2. V√° em Settings > Database
# 3. Role at√© "Connection string"
# 4. Escolha "Transaction" mode
# 5. Copie a URI: postgresql://postgres.abc:[SUA-SENHA]@db.supabase.co:5432/postgres
# 6. Substitua [SUA-SENHA] pela senha definida
```

### Passo 3: Executar Migration
```bash
# Conectar via psql (instalar se necess√°rio)
sudo apt-get install postgresql-client

# Conectar ao Supabase
psql "postgresql://postgres.abc:SUA_SENHA@db.supabase.co:5432/postgres"

# Ou executar direto do arquivo
psql "postgresql://postgres.abc:SUA_SENHA@db.supabase.co:5432/postgres" < dump.sql
```

### Passo 4: Verificar Importa√ß√£o
```sql
-- Conectado no psql do Supabase
\dt  -- Listar tabelas
SELECT 'T√©cnicos' as tabela, COUNT(*) FROM technicians
UNION ALL
SELECT 'Equipes', COUNT(*) FROM teams
UNION ALL
SELECT 'Ordens', COUNT(*) FROM service_orders;
-- Deve retornar: 6 t√©cnicos, 3 equipes, 8 ordens
```

## OP√á√ÉO B: POSTGRESQL LOCAL (Para desenvolvimento)

### Passo 1: Criar Container Docker
```bash
# Criar container PostgreSQL
docker run --name service-orders-db \
  -e POSTGRES_PASSWORD=postgres \
  -e POSTGRES_DB=service_orders_db \
  -p 5432:5432 \
  -d postgres:15

# Verificar se est√° rodando
docker ps
```

### Passo 2: Importar Dados
```bash
# Esperar container iniciar (30 segundos)
sleep 30

# Importar dump completo
docker cp dump.sql service-orders-db:/dump.sql
docker exec service-orders-db psql -U postgres -d service_orders_db -f /dump.sql

# Ou apenas estrutura + dados separados
docker exec service-orders-db psql -U postgres -d service_orders_db -f migrations.sql
docker exec service-orders-db psql -U postgres -d service_orders_db -f seeds.sql
```

### Passo 3: Testar Conex√£o
```bash
# Conectar ao banco local
docker exec -it service-orders-db psql -U postgres -d service_orders_db

# Verificar dados
\dt
SELECT COUNT(*) FROM technicians;  -- Deve retornar 6
SELECT COUNT(*) FROM service_orders;  -- Deve retornar 8
```

# ============================================
# 5. ALTERA√á√ïES NO C√ìDIGO
# ============================================

## ARQUIVO 1: server/storage.ts (CR√çTICO)

### Problema Atual:
```typescript
// LINHA 72 - PROBLEMA AQUI
export class MemStorage implements IStorage {
  private technicians: Map<string, Technician>;
  private teams: Map<string, Team>;
  // ... resto em mem√≥ria
}

// LINHA 655 - PROBLEMA AQUI
export const storage = new MemStorage();
```

### Solu√ß√£o - Substituir por DatabaseStorage:
```typescript
// ALTERAR AQUI - Importar depend√™ncias do banco
import { db } from "./db";
import { 
  technicians, teams, serviceOrders, reports, 
  cities, neighborhoods, serviceTypes 
} from "@shared/schema";
import { eq } from "drizzle-orm";

// ALTERAR AQUI - Implementar DatabaseStorage
export class DatabaseStorage implements IStorage {
  async getTechnician(id: string): Promise<Technician | undefined> {
    const [technician] = await db.select().from(technicians).where(eq(technicians.id, id));
    return technician || undefined;
  }

  async getAllTechnicians(): Promise<Technician[]> {
    return await db.select().from(technicians);
  }

  async createTechnician(insertTechnician: InsertTechnician): Promise<Technician> {
    const [technician] = await db
      .insert(technicians)
      .values(insertTechnician)
      .returning();
    return technician;
  }

  // ... implementar todos os outros m√©todos
}

// ALTERAR AQUI - Usar banco real
export const storage = new DatabaseStorage();
```

## ARQUIVO 2: server/db.ts (VERIFICAR)

### Situa√ß√£o Atual:
```typescript
// LINHA 8-12 - VERIFICAR AQUI
if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}
```

### A√ß√£o: ‚úÖ EST√Å CORRETO
N√£o precisa alterar, j√° est√° configurado para usar DATABASE_URL

## ARQUIVO 3: drizzle.config.ts (VERIFICAR)

### Situa√ß√£o Atual:
```typescript
// LINHA 3-5 - VERIFICAR AQUI
if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}
```

### A√ß√£o: ‚úÖ EST√Å CORRETO
N√£o precisa alterar, j√° configurado

## ARQUIVO 4: package.json (VERIFICAR)

### Situa√ß√£o Atual:
```json
{
  "scripts": {
    "db:push": "drizzle-kit push"  // VERIFICAR AQUI
  }
}
```

### A√ß√£o: ‚úÖ EST√Å CORRETO
Script j√° configurado para migrations

# ============================================
# 6. CONFIGURA√á√ÉO DE AMBIENTE
# ============================================

## Arquivo .env (CRIAR)

### Para Supabase:
```env
# ALTERAR AQUI - URL do Supabase
DATABASE_URL=postgresql://postgres.abc:SUA_SENHA@db.supabase.co:5432/postgres

# ALTERAR AQUI - Configura√ß√µes adicionais
SESSION_SECRET=sua_chave_secreta_forte_aqui
NODE_ENV=development
PORT=5000
```

### Para PostgreSQL Local:
```env
# ALTERAR AQUI - URL local
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/service_orders_db

# ALTERAR AQUI - Configura√ß√µes adicionais
SESSION_SECRET=sua_chave_secreta_forte_aqui
NODE_ENV=development
PORT=5000
```

### Para Vercel (Produ√ß√£o):
```env
# ALTERAR AQUI - URL do banco de produ√ß√£o
DATABASE_URL=postgresql://postgres.abc:SENHA@db.supabase.co:5432/postgres

# ALTERAR AQUI - Configura√ß√µes de produ√ß√£o
SESSION_SECRET=chave_super_secreta_producao
NODE_ENV=production
```

# ============================================
# 7. DEPLOY LOCAL E PRODU√á√ÉO
# ============================================

## DESENVOLVIMENTO LOCAL

### Passo 1: Configurar Ambiente
```bash
# Clonar/baixar projeto
git clone seu-repositorio
cd service-orders-system

# Instalar depend√™ncias
npm install

# Criar arquivo .env
cp .env.example .env
# ALTERAR AQUI - Editar .env com suas configura√ß√µes
nano .env
```

### Passo 2: Configurar Banco
```bash
# Op√ß√£o A: Usar Supabase (recomendado)
# 1. Criar projeto no Supabase
# 2. Executar dump.sql no SQL Editor do Supabase
# 3. Configurar DATABASE_URL no .env

# Op√ß√£o B: Usar Docker local
docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres
docker cp dump.sql postgres:/dump.sql
docker exec postgres psql -U postgres -f /dump.sql
```

### Passo 3: Testar Localmente
```bash
# ALTERAR AQUI - Verificar se storage.ts foi modificado
# Rodar aplica√ß√£o
npm run dev

# Verificar logs
# Deve mostrar: "serving on port 5000"
# N√£o deve mostrar erros de banco

# Testar no browser: http://localhost:5000
```

## DEPLOY NO VERCEL

### Passo 1: Preparar Reposit√≥rio
```bash
# Commit todas as altera√ß√µes
git add .
git commit -m "feat: migrate from MemStorage to PostgreSQL"
git push origin main
```

### Passo 2: Configurar Vercel
```bash
# Instalar Vercel CLI
npm i -g vercel

# Login no Vercel
vercel login

# Deploy inicial
vercel

# Configurar vari√°veis de ambiente
vercel env add DATABASE_URL
# ALTERAR AQUI - Inserir URL do Supabase

vercel env add SESSION_SECRET
# ALTERAR AQUI - Inserir chave secreta forte

vercel env add NODE_ENV
# Inserir: production
```

### Passo 3: Deploy Final
```bash
# Deploy de produ√ß√£o
vercel --prod

# Verificar URL fornecida
# Testar aplica√ß√£o online
```

# ============================================
# 8. CHECKLIST FINAL
# ============================================

## ‚úÖ PR√â-MIGRA√á√ÉO
- [ ] 1. Backup dos dados atuais (j√° feito: dump.sql)
- [ ] 2. Arquivos SQL gerados (dump.sql, migrations.sql, seeds.sql)
- [ ] 3. Banco externo criado (Supabase ou Docker)
- [ ] 4. URL de conex√£o obtida
- [ ] 5. Teste de conex√£o com banco externo

## ‚úÖ MIGRA√á√ÉO DE C√ìDIGO
- [ ] 6. Substituir MemStorage por DatabaseStorage em server/storage.ts
- [ ] 7. Implementar todos os m√©todos do IStorage com Drizzle
- [ ] 8. Configurar arquivo .env com DATABASE_URL
- [ ] 9. Testar localmente: npm run dev
- [ ] 10. Verificar logs sem erros

## ‚úÖ MIGRA√á√ÉO DE DADOS
- [ ] 11. Executar dump.sql no banco externo
- [ ] 12. Verificar tabelas criadas (\dt no psql)
- [ ] 13. Verificar dados inseridos (SELECT COUNT(*))
- [ ] 14. Testar queries b√°sicas
- [ ] 15. Verificar foreign keys e constraints

## ‚úÖ TESTE LOCAL
- [ ] 16. Aplica√ß√£o inicia sem erros
- [ ] 17. Dashboard carrega dados do banco
- [ ] 18. CRUD de t√©cnicos funciona
- [ ] 19. CRUD de equipes funciona
- [ ] 20. CRUD de ordens de servi√ßo funciona

## ‚úÖ DEPLOY PRODU√á√ÉO
- [ ] 21. C√≥digo commitado no Git
- [ ] 22. Vercel configurado
- [ ] 23. Vari√°veis de ambiente configuradas
- [ ] 24. Deploy realizado com sucesso
- [ ] 25. Aplica√ß√£o online funcionando

# ============================================
# 9. COMANDOS √öTEIS
# ============================================

## Banco de Dados:
```bash
# Conectar ao Supabase
psql "postgresql://postgres.abc:SENHA@db.supabase.co:5432/postgres"

# Conectar ao Docker local
docker exec -it service-orders-db psql -U postgres -d service_orders_db

# Verificar tabelas
\dt

# Contar registros
SELECT 'technicians' as table, COUNT(*) FROM technicians
UNION ALL SELECT 'teams', COUNT(*) FROM teams
UNION ALL SELECT 'service_orders', COUNT(*) FROM service_orders;

# Backup do banco
pg_dump "postgresql://..." > backup.sql

# Restaurar backup
psql "postgresql://..." < backup.sql
```

## Desenvolvimento:
```bash
# Instalar depend√™ncias
npm install

# Rodar em desenvolvimento
npm run dev

# Build para produ√ß√£o
npm run build

# Verificar TypeScript
npm run check

# Sincronizar schema com banco
npm run db:push
```

## Docker:
```bash
# Criar PostgreSQL
docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres

# Ver logs do container
docker logs postgres

# Parar container
docker stop postgres

# Remover container
docker rm postgres

# Executar comando no container
docker exec postgres psql -U postgres -c "SELECT version();"
```

## Vercel:
```bash
# Login
vercel login

# Deploy
vercel

# Deploy produ√ß√£o
vercel --prod

# Ver logs
vercel logs

# Configurar vari√°veis
vercel env add VARIABLE_NAME

# Listar vari√°veis
vercel env ls
```

# ============================================
# 10. TROUBLESHOOTING
# ============================================

## Problema: "DATABASE_URL not found"
```bash
# Verificar se arquivo .env existe
ls -la .env

# Verificar conte√∫do do .env
cat .env

# Recriar .env se necess√°rio
cp .env.example .env
```

## Problema: "Connection refused"
```bash
# Para Docker local - verificar se container est√° rodando
docker ps

# Para Supabase - verificar URL e senha
psql "postgresql://sua-url" -c "SELECT 1;"
```

## Problema: "Table doesn't exist"
```bash
# Verificar se migrations foram executadas
psql "sua-database-url" -c "\dt"

# Executar migrations se necess√°rio
psql "sua-database-url" < dump.sql
```

## Problema: "TypeScript errors"
```bash
# Verificar tipos
npm run check

# Reinstalar depend√™ncias
rm -rf node_modules package-lock.json
npm install
```

## Problema: "Vercel build fails"
```bash
# Verificar vari√°veis de ambiente
vercel env ls

# Ver logs detalhados
vercel logs --follow

# Rebuild
vercel --force
```

## Problema: "Data not loading"
```bash
# Verificar se dados foram inseridos
psql "database-url" -c "SELECT COUNT(*) FROM technicians;"

# Verificar logs da aplica√ß√£o
# Console do navegador
# Logs do servidor
```

# ============================================
# SUPORTE E CONTATO
# ============================================

## Arquivos Importantes:
- dump.sql: Script completo do banco (estrutura + dados)
- migrations.sql: Apenas estrutura das tabelas
- seeds.sql: Apenas dados de exemplo
- .env.example: Template de configura√ß√£o

## Links √öteis:
- Supabase: https://supabase.com/docs
- Drizzle ORM: https://orm.drizzle.team/docs/overview
- Vercel: https://vercel.com/docs
- PostgreSQL: https://www.postgresql.org/docs/

## Observa√ß√µes Finais:
Este sistema foi migrado de armazenamento em mem√≥ria (MemStorage) para PostgreSQL real. A migra√ß√£o preserva todos os dados e funcionalidades existentes.

Todas as altera√ß√µes necess√°rias est√£o marcadas com "// ALTERAR AQUI" nos c√≥digos acima.